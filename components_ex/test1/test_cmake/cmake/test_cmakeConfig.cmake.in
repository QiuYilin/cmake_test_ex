
set(FIND_PROJECT_NAME test_cmake)

set(_project_FIND_PARTS_REQUIRED)
if (${FIND_PROJECT_NAME}_FIND_REQUIRED)
    set(_project_FIND_PARTS_REQUIRED REQUIRED)
endif()
set(_project_FIND_PARTS_QUIET)
if (${FIND_PROJECT_NAME}_FIND_QUIETLY)
    set(_project_FIND_PARTS_QUIET QUIET)
endif()

get_filename_component(_project_install_prefix "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

# Let components find each other, but don't overwrite CMAKE_PREFIX_PATH
set(_project_CMAKE_PREFIX_PATH_old ${CMAKE_PREFIX_PATH})
set(CMAKE_PREFIX_PATH ${_project_install_prefix})

foreach(module ${${FIND_PROJECT_NAME}_FIND_COMPONENTS})
    find_package(${FIND_PROJECT_NAME}-${module}
        ${_project_FIND_PARTS_QUIET}
        ${_project_FIND_PARTS_REQUIRED}
        PATHS "${_project_install_prefix}" NO_DEFAULT_PATH
    )
    if (NOT ${FIND_PROJECT_NAME}-${module}_FOUND)
        if (${FIND_PROJECT_NAME}_FIND_REQUIRED_${module})
            set(_project_NOTFOUND_MESSAGE "${_project_NOTFOUND_MESSAGE}Failed to find ${FIND_PROJECT_NAME} component \"${module}\" config file at \"${_project_install_prefix}/${FIND_PROJECT_NAME}-${module}/${FIND_PROJECT_NAME}-${module}Config.cmake\"\n")
        elseif(NOT ${FIND_PROJECT_NAME}_FIND_QUIETLY)
            message(WARNING "Failed to find ${FIND_PROJECT_NAME} component \"${module}\" config file at \"${_project_install_prefix}/${FIND_PROJECT_NAME}-${module}/${FIND_PROJECT_NAME}-${module}Config.cmake\"")
        endif()
    endif()

    # For backward compatibility set the LIBRARIES variable
    list(APPEND ${FIND_PROJECT_NAME}_LIBRARIES "${FIND_PROJECT_NAME}::${module}")
endforeach()
list(APPEND ${FIND_PROJECT_NAME}_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/${FIND_PROJECT_NAME}")

# Restore the original CMAKE_PREFIX_PATH value
set(CMAKE_PREFIX_PATH ${_project_CMAKE_PREFIX_PATH_old})

if (_project_NOTFOUND_MESSAGE)
    set(${FIND_PROJECT_NAME}_NOT_FOUND_MESSAGE "${_project_NOTFOUND_MESSAGE}")
    set(${FIND_PROJECT_NAME}_FOUND False)
endif()


